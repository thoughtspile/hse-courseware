// Переменную можно объявить двумя способами
const x = 12;
let y = 10;

// Если объявить через const, нельзя присваивать еще раз -- эта строка не сработает
// x = 28;
y = 30;

// В целом предпочитайте const.

// Типизация нестрогая. Базовые типы:
// число
y = 213.2;
// строка
y = 'hello';
// булево
y = false;

// Вывести в stdout:
console.log('(log) x is:', x);


// ** Функции **

// Функции первого класса (first class citizen) можно класть в переменные и передавать в другие функции параметром:
const fnOld = function(x) {
  return x + 18;
};
// Используйте новый синтаксис -- стрелочные функции!
const mult = (x, y) => { return x * y; };
const sum = (x, y) => x + y; // Если тело функции состоит только из return, можно убрать return и фигурные скобки.
const addFour = x => x + 4; // Если аргумент один, можно не окружать его скобками.


// ** Массивы **

const arr = [1,2,3,4];
console.log('arr[0]', arr[0]); // получить элемент
arr[2] = 100; // const значит только что переменной arr нельзя присвоить новое значение -- старое можно менять как угодно
console.log('mutated array', arr); // console.log можно передать любой объект

// Полезные методы массива:
arr.push(5); // Добавить элемент в конец
console.log('append el', arr);

console.log('length', arr.length); // длина массива

console.log('inc by 4', arr.map(addFour)); // map создает новый массив, применяя функцию к каждому элементу
console.log('square', arr.map(x => x * x)); // можно создать функцию прямо на месте, а не брать из переменной

arr.forEach(x => console.log('element', x)); // forEach вызывает функцию для каждого элемента

console.log('sum', arr.reduce((acc, x) => acc + x, 0)); // reduce(<Function>, <initial value>)
// Для каждого элемента массива:
// 1. получает текущее значение аккумулятора и элемента массива
// 2. делает с ними что-то
// 3. возвращает новое значение аккумулятора
// Начальное значение аккумулятора берется из второго параметра.


// **  Объекты **

// Объект -- базовый составной тип данных js. Состоит из пар ключ-значение, ключ -- строка
const obj = {
  num: 9,
  str: 'hello',
  fn: sum,
  arr: [1, 12, 34],
  nested: {
    x: 1,
    y: 2
  },
  // после последнего элемента можно ставить запятую, а можно не стави
  trailing: 12,
};
// получить элемент по ключу:
console.log('call member funcion', obj.fn(1, 2));
// или по-массивному:
console.log(obj['fn']);
// Присвоить так же.
obj.fn = addFour;
